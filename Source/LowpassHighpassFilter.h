/*
  ==============================================================================

    LowpassHighpassFilter.h
    Created: 1 May 2024 3:08:53pm
    Author:  sofiy

  ==============================================================================
*/

#pragma once

#include <JuceHeader.h>
#include <vector>

//==============================================================================
/*
*/
class LowpassHighpassFilter  : public juce::Component
{
public:
    LowpassHighpassFilter();
    ~LowpassHighpassFilter() override;

    void paint (juce::Graphics&) override;
    void resized() override;

    // setters for member attributes
    void setHighPass(bool highPass);
    void setCutoffFrequency(float cutoffFrequency);
    void setSamplingRate(float samplingRate);

    // same principle as the one in PluginProcessor automatically generated by JUCE
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&);


private:
    bool highPass; // tells whether the filter is Highpass or Lowpass
    float cutoffFrequency; // speaks for itself..
    float samplingRate; // speaks for itself..
    std::vector<float> dnBuffer; // a buffer for each channel, but each buffer is only size 1 (cause filter of order 1)

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (LowpassHighpassFilter)
};
